1. What MuleSoft API-led connectivity layer is intended to expose part of a backend database without business logic?
Experience		
Data 	
System			
Process		
Security

2. What statement is part of MuleSoft's description of an application network?
Creates reusable APIs and assets designed to be consumed by other business units
Creates and manages high availability and fault tolerant services and infrastructure
Leverages Central IT to deliver complete point-to-point solutions with master data management
Creates and manages a collection of JMS messaging services and infrastructure
 
3. According to MuleSoft, what is the Center for Enablement's role in the new IT operating model?
Creates and manages discoverable assets to be consumed by line of business developers
Centrally manages partners and consultants to implement line of business projects
Implements line of business projects to enforce common security requirements
Produces and manages API policies for line of business deployments
 
4. What is a core characteristic of the Modern API?
API is designed first using an API specification for rapid feedback
API is rapidly prototyped following AGILE methodology
API follows the RESTful architecture
API has a mechanism to accept feedback and suggestions for improvement
 
5. What HTTP method in a RESTful web service is typically used to completely replace an existing resource?
PATCH	
PUT		
POST	
GET

6. What is the main purpose of flow designer in Design Center?
To design API RAML files in a graphical way
To design and develop fully functional Mule applications in a hosted development environment
To define API lifecycle management in a graphical way
To design and mock Mule application templates that must be implemented using Anypoint Studio
 
7. Where does a deployed flow designer application run in Anypoint Platform?
Exchange		CloudHub worker		API Manager		Design Center
 
8. What MuleSoft product enables publishing, sharing, and searching of APIs?
API Designer		Runtime Manager		Anypoint Exchange		API Notebook

9. What asset can NOT be created using Design Center?
API Specifications
Mule Applications
API Fragments
API Portals

10. A web client submits a GET request to a Mule application to the endpoint /customers?id=48493. 
Where is the id stored in the Mule event by the HTTP Listener?
Inbound Properties
Variables
Attributes
Payload

11.An API has been created in Design Center. What is the next step to make the API discoverable?
Deploy the API to a Maven repository
Enable autodiscovery in API Manager
Publish the API from inside flow designer
Publish the API to Anypoint Exchange

12. What is the purpose of the api:router element in APIkit?
Creates native connectors using a 3rd party Java library
Serves as an API implementation
Validates requests against RAML API specifications and routes them to API implementations
Validates responses returned from API requests and routes them back to the caller

13. What is the minimum required configuration in a flow for a Mule application to compile?
An event processor
An event source
A Logger component
A project RAML file

14.A Database connector is configured to select rows from a MySQL database. 
What is the format of the array of results returned from the database query?
Java
JSON
XML
CSV

15.What is NOT part of a Mule 4 event?
message
payload
inboundProperties
attributes


16. How does APIkit determine the number of flows to generate from a RAML specification?
Creates a separate flow for each resource
Creates a separate flow for each resource that contains child resources
Creates a separate flow for each HTTP method
Creates one flow for the entire API spec
Creates a separate flow for each response status code


17. What is the purpose of API autodiscovery?
Enables API Manager to discover the published API on Anypoint Exchange
Allows the Mule application to be automatically discovered on Anypoint Exchange
Enables an API to be directly managed in API Manager
Allows a deployed Mule application to connect with API Manager to download policies and act as its own API proxy
 

18. How many Mule applications can run on a CloudHub worker? (Choose one)
At most one
At least one
Depends on the vCores of the worker
Depends on the number of CloudHub workers configured

19. What does an API proxy application NOT do?
Determine which request Mule event is allowed to pass through to the API backend service
Apply runtime policies to enforce governance
Determine which response Mule event is allowed to pass through to the API backend service
Meters the traffic flowing through the proxy

 
20. What does the Mule runtime use to enforce policies and limit access to APIs?
Anypoint Access Control
The proxy created by API Manager
API Manager
The Mule runtime's embedded API Gateway

21. API Manager has been configured to enforce an SLA policy and the RAML spec has been updated with the required client_id and client_secret header requirements. 
The new RAML spec has been published to Anypoint Exchange.
What is the next step to gain access to the API?
POST a JSON object to the /api/register endpoint of the API proxy
Request access to the API in Anypoint Exchange
Email the organization administrators to request access to the API
Add a client application to the Anypoint Platform organization

22. What happens to the attributes of a Mule event in a flow after an outbound HTTP Request is made?
New attributes may be added from the HTTP response headers, but no headers are ever removed
Previous attributes are passed unchanged
Attributes do not change
Attributes are replaced with new attributes from the HTTP Request response (which might be null)

 
23. A Set Variable component saves the current payload to a variable with the name: images. What is the DataWeave expression to access the images variable?
#[payload.images]
#[images]
#[flowVars.images]
#[vars.images]
 
24.A web service implements an API to handle requests to http://acme.com/customers/{state}. 
A web client makes a request to this API implementation at http://acme.com/customers/CA. 
What is the correct DataWeave expression to retrieve the value CA?
#[message.payload.inboundProperties.'http.uri.params'.state]
#[attributes.uriParams.state]
#[attributes.'http.uri.params'.state]
#[message.inboundProperties.'http.uri.params'.state]
#[state]

 
25. A flow contains an HTTP Listener as the event source. What is the DataWeave expression to log the Content-Type header using a Logger component?
#["Content-Type: " ++ attributes.headers.'content-type']
#["Content-Type: " + headers.'content-type']
#["Content-Type: " + attributes.headers.'content-type']
#["Content-Type: " ++ headers.'content-type']

 

26. What is NOT part of a Mule 4 event?
message
payload
outboundProperties
variables
attributes
Correct! 

27. A Mule application has two flows named parentFlow and childFlow. The childFlow begins with an HTTP Listener. 
A variable is defined in parentFlow, then an HTTP Request is made to childFlow's HTTP Listener with some headers set. 
What is the scope of the variable and attributes in the parentFlow after childFlow returns a response?
The variable is accessible. All the attributes passed to childFlow are removed or replaced.
The variable is NOT accessible. All the attributes passed to childFlow are removed or replaced.
The variable is NOT accessible. All the attributes passed to childFlow are preserved.
The variable is accessible. All the attributes passed to childFlow are preserved.


28. A Mule application has a flow named parentFlow. 
The parentFlow contains an HTTP Request operation at the end of the flow. The parentFlow also contains a Set Variable operation right before the HTTP Request operation. 
What is the scope of the variable to the server receiving the HTTP Request from parentFlow?
The variable is accessible in the server but is immutable
The variable is accessible in the server, can be changed, and changes are seen back in parentFlow
The variable is NOT accessible in the server
The variable is accessible in the server, can be changed, but changes are NOT seen back in parentFlow


29. A Mule application has two flows named parentFlow and childFlow. A variable is defined in parentFlow. 
What is the scope of the variable when the parentFlow calls childFlow using a Flow Reference?
The variable is accessible in childFlow but is immutable
The variable is accessible in childFlow, can be changed, and changes are seen back in parentFlow
The variable is NOT accessible in childFlow
The variable is accessible in childFlow, can be changed, but changes are NOT seen back in parentFlow


 
30. Refer to the exhibit. In the deployable archive's /classes folder, there are two properties files named dev.properties and prod.properties. The Mule application fails to deploy to CloudHub through Runtime Manager with the following error message. 
What could be causing this error?
The property files were NOT saved at the root level of the deployable archive
The env property is NOT set in the Runtime Manager in the Mule application's Properties tab
A file named ${env}.properties is NOT included in the deployable archive file
The dev.properties and prod.properties files were NOT uploaded to Runtime Manager

 
31. What reserved property can be defined and used in a Mule application to allow an HTTPS Listener to be accessed by external web clients after the Mule application is deployed to CloudHub?
${ssl.port}
${ssl.listener.port}
${https.listener.port}
${https.port}


32. Why must a Mule application's deployable archive package all its dependencies in order to be deployed to CloudHub?
The online logging service requires access to ALL project dependencies to log the appropriate Java classes used in the Mule application
CloudHub workers CANNOT download ALL possible project dependencies a project may contain
CloudHub workers needs to compare the current dependencies with the LATEST project dependencies from the MuleSoft repository
MuleSoft support requires access to ALL project dependencies for future online troubleshooting

33. In what file does the Mule project keep track of all of its dependencies?
mule-artifact.json
pom.xml
mule-app.properties
global.xml

34. What can ONLY be done with VM connectors, and NOT with Flow References, in a single Mule application?
Preserve variables as the Mule event gets passed to another flow
Allow a flow to pass events to another flow synchronously
Preserve the original payload when the VM connector returns a response from a flow
Allow a flow to pass events to another flow asynchronously


35. What file type is required to configure a Web Service Consumer to consume a SOAP web service?
RAML
WSDL
JSON
OAS

36. How are query parameters dynamically passed to an outbound REST request using an HTTP Request operation?
As query parameters in the HTTP Request operation
As URI parameters in the HTTP Request operation
In the Mule event's payload
As flow variables
As attributes in a Transform Message component before the HTTP Request operation
As attributes in the HTTP Listener operation

37. Refer to the exhibit. The flow calls a SOAP endpoint using the Consume operation of the Web Service Consumer. The SOAP service has a required input parameter. 
What event processor can be used to build the SOAP envelope with the required argument to pass to the SOAP service?
Set Property
Build SOAP
Transform Message
JSON to XML
Set Attachement

 
38. An HTTP Request operation returns a JSON array of objects. In the Transform Message component, what is the process to convert the array of objects to an array of custom Java Account objects?
Add the Account object metadata to the output and use the drag-and-drop feature to transform the incoming JSON data
Change the output type to the Java Account object type
Add the Account object metadata to the input and the Transform Message component will automatically convert the JSON objects to Account objects
Change the input type to the Java Account object type

 
39. What is the process to create a connector using REST Connect?
Develop the API in flow designer and publish the API to Exchange
Design the API in Anypoint Studio and upload the API to Runtime Manager
Design the API in Design Center and publish the API to Exchange
Develop the API in Anypoint Studio and export the connector as a jar file


40. How are multiple conditions used in a Choice router to route events?
To find the FIRST true condition, then route the same event to the matched route and ALL FOLLOWING routes
To route the same event to the matched route of EVERY true condition
To find the FIRST true condition, then distribute the event to the ONE matched route
To filter and aggregate the responses after copying the event to EVERY route
Correct! 

41. A Scatter-Gather processes three separate HTTP requests. Each request returns a Mule event with a JSON payload. 
What is the final output of the Scatter-Gather?
An Object containing all three Mule event Objects
An Array of the three JSON payload Objects
An Array of the three Mule event Objects
An Object containing all three JSON payload Objects
The last JSON payload Object
The last Mule event object



42. An event contains a payload that is an Array of Objects. How is the event routed in a Scatter-Gather?
The ENTIRE event is sent to each route and processed SEQUENTIALLY
The event is SPLIT and different SMALLER events are routed and processed in PARALLEL
The event is SPLIT and different SMALLER events are routed and processed SEQUENTIALLY
The ENTIRE event is sent to each route and processed in PARALLEL

 
43. What module and operation will throw an error if a Mule event's payload is not a number?
Validation module's Is number operation
Validation module's Is not number operation
Filter module's Is number operation
Filter module's Is not number operation

44.A Mule application has a main flow and a combineNames flow. In the main flow, a variable named fullName is set to the object {firstName: "Max", lastName: "Mule"}.
What is valid DataWeave code to call the combineNames flow with the input object stored in the fullName variable?
#[ dw::Flow::lookup( "combineNames", vars.fullName ) ]
#[ dw::Runtime::lookup( "combineNames", vars.fullName ) ]
#[ lookup( "combineNames", vars.fullName ) ]
#[ combineNames( vars.fullName ) ]
#[ lookup( combineNames( vars.fullName ) ) ]

 
45. What DataWeave 2.0 type can be used as input to a map operation?
Array
Object
Map
String
Key

46. What is the correct way to format the decimal 20.3844 as a string to two decimal places?
20.3844 as String {format: ".0#"}
20.3844 as :string {format: ".0#"}
20.3844 as String as format: ".0#"
20.3844 as :string as format: ".0#"
20.3844 as String (format = ".0#")
20.3844 as :string (format = ".0#")


47. A Flow Reference component sends a non-empty JSON object payload to another flow named childFlow, which then returns an XML body.
A Flow Reference component saves the payload returned from childFlow to its target attribute named payload. Refer to the exhibit. 
What is true about the Mule event's payload at the next event processor after the Flow Reference component?
The payload is the XML response body
The payload is a non-empty Java object
The payload is the original JSON object
The payload is null

Sorry, that's incorrect. 
48. Refer to the exhibit. What is the object type returned by the File List operation?
Array of Mule event objects
Object of Mule event objects
Array of String file names
Object of String file names

Sorry, that's incorrect. 
49. In the Database On Table Row operation, what does the Watermark column enable the On Table Row operation to do?
To save the most recent records retrieved from a database to enable database caching
To avoid duplicate processing of records in a database
To enable multithreaded event processing for each record retrieved from a database
To save the payload into the ObjectStore for future reference

Sorry, that's incorrect. 
50 . Assume that a database table contains a recordID column that always increases as new records get added to the table.
In a Mule application, what is the key process to enable manual watermarking for requests to a database using the Scheduler endpoint and the Database SELECT operation?
Save the max recordID from the set of recordIDs in an ObjectStore and reference this recordID in subsequent database requests
Enable automatic watermarking in the Database Select operation
Set the Watermark column in the Scheduler endpoint to the recordID
Save the max recordID from the set of recordIDs in a variable and reference this variable in subsequent database requests

Sorry, that's incorrect. 
51. A flow has a JMS Publish consume operation followed by a JMS Publish operation. Both of these operations have the default configurations.
Which operation is asynchronous (does not wait for a response before continuing to the next event processor) and which operation is synchronous (blocks and waits for a response or timeout before continuing to the next event processor)?
Publish consume: Asynchronous. Publish: Synchronous
Publish consume: Asynchronous. Publish: Asynchronous
Publish consume: Synchronous. Publish: Asynchronous
Publish consume: Synchronous. Publish: Synchronous

-----------------------------------------------------------------------------------------------------------
52. Use anypoint platform
1. as a centeral repository for discovry and reuse of asset.
2. to build apps to consume assests and connect systems.
3. to take api through its complete lifecycle

53. use anypoint studio:
1. build and debug ingegrations and api implementation
2. connect to db,fiels, web services, SaaS apps, JMS q/T and more.
3. transform data using dataweave and transform language.
4. add application  logic and handel errors.
5. structure applications to facilitate developmetn and deployment.
6. handle batch data processing.

54. different types of api nodes
1. system api
2. process api
3. experience api.

55. outcome of api led connectivity
1. on time and within budget
2. drives reuse vs build
3. desing in readiness for change.
4. build in governance, compliance , security and scalability.
5. meets the need of your business

56. what is role of c4e
C4E ensures that the assests are 
productized and published.
consumable 
consume broadly
fully leveraged.

57.  what is C4E:
It is center for enablement and is cross functional team

58. what is an Application network:
1. emerges bottom up via self service.
2. provide visibilty , security, governance at every api node.
3. is recomposble : IT bends but not break.- built for change.

59. What is an API:
1. it is application progremming interface.
2. It provides the info for how to communicate with  a software component. It defines.
	- operation
	- input
	- output
	- data types
3. It defines functionality indendent of implementation


60. What is an webservice:
1. It is a method of communication that allows two software component to exchange data using some protocal over internet
2. the system communicates with web services using some defined rules.

61. 2 types of webservics:
1. soap web service.
2. restfull web service

62. RESTFull webservice
1. REST - Representationl state transform
 
 what is REST- an architecture style where client and server exchange representation of resouces using standered http protocal
 
63. REST webservice request methods:
1. GET - retrives the current state of resource in some representation (usually xml or json)
2. POST - creates new resource
3. PUT - replace resource completely. If resouces not exists, it creates new
4. delete - delete the resouces 
5. patch - partially update the resource.

64. API documentation
	It should include the list of all possible resouces, how to get the apis.

65. API Portals:
	Accelerates onboarding by providing developers a centralized place for discovering all the tools they need to succefully use the API which could include
	1. documentation, tutorials, code snippet and examples.
	2. a way to register application to get access to the API
	3. a way to provide feedback and make request
	4. a way to test the API by making calls to it.

66. 2 types of APIs
1. Secured API - 
	- need authencation
	- need to provide credentials or tokens.
	- often a proxy is created to access the api
	- we can also secure api using oauth, saml, JWT and more
2. unsecured API - API may be public and needs no authentication

67. response from an API
 REST web service returns http status code as a response.
 
 200 - OK- the request succeeed - get/patch/put/delete
 201 - created a new resource - POST
 304 -  not modified - patch,put
 400 - bad request - ALL
 401 - not authencated - all
 404 - not found - ALL
 500 - internal server error - ALL
 
68. Anypoint platform:
1. Design center - 
	API Designer: (web app for designing, documenting and mocking apis)
	1. API Specifications
	2. API Fragments
	Flow Designer.(web app for building integration apps tht connect to systems and consume apis)
	3. Mule Application



2. Anypoint Exchange:
	1. library of assests
	2. centeral repository that is critical for the success of building a network
	3. ensures assests are published somewhere they can be discovered and reused
	
69.exchange contains:
	1. public assests
	2. priviate assest
	
70. API Portal:
	When a REST API is added to the exchange, an API Portal is automatically created for it.
	API Portal has 
	1. auto generated API documentation
	2. API Console to consume and test the API
	3. generates endpoints to test the API
	
	API portal can be shared with both internal and external users.

71. Connectors:  
	When a RAML 1.0 API Spec is added into exchange, a connector is automaticlly created for it.
	this connector can be used in mule application to call the api

72. Mule Application:
	is created from flow desinger and anypoint studio
	are java application using spring
	they are deployed on mule runtime
	mule application receives event (called event source), process them ( called event processer) and route them to other endponts
	a flow has event source and event processer 
	an application can consist of single flow, multi flow and multi flow connected togetehr

73. Mule runtime(Mule) : 
	It is a runtime engine of anypoint platform
	IT is a light weight java based ESB(Enterprise service bus)
	It is a integration platform that allows developers to connect apps together quickly and easily, enabling them to exchange data.
	It acts as a transit system for carrring data between apps
	it can connect all systems like db, sap, salesforce etc
	decouple point to point
	can be deployed any where

74. Mule flow:
	1. mule event source - 
		it initate the execution of flow
		It can be triggered by event like 
		http requst, change in db or file, creation of new ids in some systems
		
	2. mule event proceser: it transform, filter, enrich and process the event  and its message.

75. Running mule application in flow designer
	1. when we create a mule application in design center, a new application is created, 
	2. it is delployed and started in mulesoft hosted mule runtime (called cloudhub worker) in a cloud and started.
	
76. cloudhub worker:
	1. a worker is a dedicated instance of mule that runs an app
	2. each worker 
		runs in a seperate containers from every other application
		is deployed and monitred indendently
		runs in a specifc worker cloud in a region of the world
		
	worker sizes:
	0.1 vCores
	0.1 vCores 500mb mem
	0.2 vCores 1 TB mem
	1 vCores 2 TB 
	

77. Mule event contains	
	1.message
		attribute
		payload
	  variable

78. Spec driven development: an application is developed in 2 phase 
	1. creation of spec(design)
	2. development of the code.
	
79. RAML: Restfull api modeling language
	RAML is based on broadly-used standered such as YAML and JSON
	data structure hirechy is specified by indendentation
	
	all resouces in RAML begins with /
	resource are urls identified by the web service urls that we want to act upon using http method
	nested resouces are used for the subset of a resouces to narrow it.
	uri parameters are enclosed using {}

80. modulering API using RAML
	instead of including all the codes in one RAML file, we can modulerise and compose it into resuable fragments.
	
	fragments can be stored 
	1. in different files and folders within project
	2. in seperate API fragments project in design center
	3. in seperate RAML fragments in exchange
	
	to access fragments using !include
	

81. Transform Data:
 DataWeave 2.0 is the expression language for mule to access, query and transform mule event data.

82. To access the query parameter
	attribute.uriParams.paramname

#[{'ID' : attributes.uriParams.ID}]

to access the id in the select querey:
SELECT * FROM American WHERE ID = :ID

83. APIKIT:
	apikit is an open source toolkit that includes an anypoint studio plugin
	the anypoint studio can generate an interface automaticlly from RAML defination
	It genertes a main routing flow or flows for each resouces/method pairs
	we can add a event proceser for our logic
	
	steps:
	1. create a RAML file
	2. create router in global properties and add the raml file 
	3. add APIKit console with http listner /console/*
	4. add APIKit router with http listner /api/*
	5. add flow with name get:/books/book/{id}:Router

84. Flow reference: To call other flow or sub flow. In the flow reference, it has target which will hold the value of the output from the subflow or called flow.

85. Deployment options
	1.during development, application are deployed to an embedded mule runtime in anypoint studio
	2. for everything else the deployment is done	
		1. cloudhub
			mulesoft hosted on aws.
			its a platform as a service
		2. customers hosted mule runtime	
			1. on prem
			2. cloud service providers aws, azure and private cloud foundary.


86. Deploying application in cloudhub:
	1. using anypoint studio
	2. anypoint platform using runtime manager
	

87. API Proxy : It is an application that controls access to the webservice, restricting acccess  and usages through the use of the API gateway.

88. API Gateway : it is a runtime designed  and optimized to host an API or to open a connection to an API deployed to anotehr runtime.
					It is a part of a mule runtime.
					API Gateway is a point of control
						determine which trafic is auterized to pass through the API to backed service.
						meters the traffic flowing through
						logs all tranctions, collecting and tracking analytics data
						applies runtime policies to enforce governance like rate limiting, throttling and caching.
						

89. to access the query parameter:
	say http://localhost:8081/test/1?id=6&name=sham
	
	to access id and name : attributes.queryParams.id
	
	to access the uri param (say 1) : attributes.uriParams.id
	anoterh way : attributes.uriParams['id']
	to access any headers : attributes.headers.host
	to access attribute : attributes.method or attribute.listnerpath and etc
	another way to access attributes.headers['user-agent']
	
	complete attribute list
	
	{
   Request path=/flowrefdemo/3
   Method=GET
   Listener path=/flowrefdemo/{id}
   Local Address=127.0.0.1/127.0.0.1:8081
   Query String=ids=5
   Relative Path=/flowrefdemo/3
   Remote Address=/127.0.0.1:54914
   Request Uri=/flowrefdemo/3?ids=5
   Scheme=http
   Version=HTTP/1.1
   Headers=[
      accept-encoding=gzip,deflate
      host=localhost
      connection=Keep-Alive
      user-agent=Apache-HttpClient/4.1.1 (java 1.5)
   ]
   Query Parameters=[
      ids=5
   ]
   URI Parameters=[
      id=3
   ]
}

90. Flow vs subflow
	1. flow can have their own error handling stratigy where as sub flow cant have error handler.
	flows without event source are called private flow.
	subflows are executed exactly if the proceser are in calling flow.
	variables persist through all flows
	
91. When using flow reference, events are passed synchronously between flows.

92. we may want to pass events between flows asynchronously 
	1. to achive parallelism
	2. distribute work accross cluster.
	3. communicate with another application running in same mule domain
	4. allow for more specifc tuning or areas in specifc stage
	
	we can pass events between flows asynchronously using VM connectors
	
93. VM Connectors: use this for intra and inter application communication throug asynchronous queues.
	queues can be transit or persistant.
	by default connector uses in-memory queue.
	
	transit queues are faster but are lost in case of system crash.
	persistant queues are slower but reliable.
	
	we have pulish, consume and publish-consumen.
	The publish-consume operation allows you to publish a Message to any destination, and then wait for a reply on a different Destination.
	
94. we can define all the connectors in a global.xml file and use those connectors in all the flows.

95. yaml file: we can define properties in  a file eitehr .yaml or .properties and use those properties using below syntax. we need to add the properties in global configuration properties.

	http:
	  details:
		hostname: "localhost"
		address: "8081"
	 
	db:
	  host: "localhost"
	  port: "3306"
	  user: "root"
	  database: "test"
	  
	  ${http.details.address}
	  
	  in dataweave we can access it like 
	  {port : p('http.details.port')}
	  
	  
	  this properties file can be encrypted.
	  this is implemeted using properties placeholder
	  can be overwritten by system propertie when deploying in different env.
	  
96. use system properties to overwrite values.
in the studio, we can overwrite using jvm parameter run --> run configuration --> arguments(program arguments)]


97. POM Files: Is an xml file that contains info about the projects and configuration details used by maven to build the project including:
	1. project info like versions, discriptions, etc.
	2. project dependencies
	3. the plugins or goals that can be executed.
	

98. metadata:
	1. it is stored in application-type.xml file.
	2. for output structure required for transformation
	3. for the output of operations that can connect to data source of different structure 
	4. for the output of connectors that are not datascence enabled.
	
99. Modules and connectors:
	1. modules are extensions to the mule runtime that we can use when building a mule app.
	2. connectors are modules that connect to an external server. like http, database, sap, slac

100. Use transform message component  to pass arguments to a soap webservice. an datascence is automatically created if we use before consume.
		
101. Routers:
	routers send event to one or more group of event processer(a.k.a routes)
	types of routers:
	choic - one route is executed based on conditional logic
	first successful - route is  executed sequantially untill one is executed succesfully.
	round robin - one route is executed , which one is selected by iterating group through a list maintained accross execution.
	scatter-gather. - all routes are executed concurently.
	
	scatter-gather: events are send to all the event processor and are executed concurently and responce returned is collection of all the results.
	this collection is an object of objects

102. valiadators:
	 isIP
	 isURL
	 isBlankString
	 isemail
	 iselpased
	 isemptycollection
	 isfalse
	 isnull
	 isnotnull
	 isnumber
	 istime
	 istrue

103. Handling errors:
	1. when an event is processed through a mule flow and an error occurs in a mule flow,
		normal flow execution stops
		event is passed to the first processer in the error handler
	
	2. if theres no error handler is defined, default error handler is used.
	
	3. when an error is throwing, an error object is created.
	
	4. error object has 2 properties
		error.description - a string
		error.errorType - object.
	5. error types are identified by namespace and an identifier.
		HTTP:UNAUTHERIZED, HTTP:Connectivity.
	6. each error types has a parent.
	7. error type hirechy :
	
		Errors
			any
				unknown
				transformation
				routing
				connectivity
					retry_exhausted
				expression
				security
					client_security
					server_security
			CRITICAL
				fatal
				overload
				
104.  Response returned from HTTP Listener	
	
		by default for success responce
			the payload
			status code 200

		by default for error responce
			error description
			status code 500
			
105. error handler can be added :
	1. at application level. (outside fo any flow) a.k.a global error handler.
	2. at flow
	3. a selection of one or more event processer.
	
106. 2 types of error handler scope
	1.on error propagate
		all the event processer in the scope will be executed.
		at the end of the scope
			the rest of the flow that threw the error is not executed.
			the error is rethrown up the next level and handled there.
		an http listner returns error responce
	2. on error continue	
		all the event processer in the scope will be executed.
		at the end of the scope
			the rest of the flow that threw the error is not executed.
			the event  is passed up the next level as if the flow execution had completed successfully.
		an http listner returns success responce
	
	set the when condition to a boolean dataweave expression. e.g
		- HTTP:UNAUTHERIZED
		- error.errorType.namespace == 'HTTP'
		-error.errorType.identifier == 'UNAUTHERIZED'
		-error.cause.message contains 'request'
		-error.cause.class contains 'http'
	

107. all flow except sub flow can have their own error handlers.
any number of error scopes can be added to flow error handler

108. which error scope handles an error .
	1. if flow has an error handler
		- the error is handled by the first scope whose conditon evaluates to true
		- if no scope conditions are true, the error is handled by mule default error handler. not from application global handler
	2. if the flow doesnot have an error handler 
		- the error is handled by a scope in an applications default error handler. if conditions are not found, then default error handler.

109. at try:
	1.on error propagate
		all the event processer in the scope will be executed.
		at the end of the scope
			the rest of the try scope is  not executed.
			if a trantion is being handled, it will roll back.
			the error is rethrown up the next level and handled there.
		an http listner returns error responce
	2. on error continue	
		all the event processer in the scope will be executed.
		at the end of the scope
			the rest of the try scope is  not executed.
			if a trantion is being handled, it will commited.
			the event  is passed up the next level as if the flow execution had completed successfully.
		an http listner returns success responce
	
110. APIKIT Error handler:
	by default, api created by APIKIT have error handlers with multiple on error propagate scopes that handle APIKIT errors
	
	the main routing  flow has six error scope.
	1. APIKIT:BAD_REQUEST > 400
	2. APIKIT:NOT_FOUND > 404
	3. APIKIT:METHOD_NOT_ALLOWED > 405
	4. APIKIT:NOT_ACCEPTABLE > 406
	5. APIKIT:UNSUPPORTED_MEDIA_TYPE > 415
	6. APIKIT:NOT_IMPLEMENTED > 415
	

	
	 
105. Reading and writing files:
	1. there are 4 connectors for working with files and folders.
	FILE(For locally mounted file systems)
	FTP
	FTPS
	SFTP
	
	all the above have same set of operations.
	it supports for
	1. file matching functionality
	2. locking
	3. reading,writing, apending, overwriting, generting new files.
	
	on cloudhub connectors can only be used with /tmp folder
	on customer hosted, it must have read/write permsion on a directory

104. Trigger a flow when a new file is created or updated
	use "on new or updated file" listner
	it polls a directory for files that have been created or updated.
	one message is generated for each file that is found.




--------------------------------------


1. What is Mulesoft ? (Mulesoft ESB Interview Questions)

Answer:
MuleSoft provides the most widely used integration platform (Mule ESB & CloudHub) for connecting SaaS & enterprise applications in the cloud and on-premise.(Mulesoft ESB Interview Questions)

2. What is Shared Resource in Mule and how they have been used ?

Answer:
We can make connectors as a reusable component by defining them as common resources and expose them to all applications deployed under the same domain, these resources are known as shared resources. These shared resource needs to be defined inside Mule Domain Project and then referred to each of the projects that are meant to use the elements in it.

3. What is a Web service API ?

Answer:
An API (Application Programming Interface) is the means by which third parties can write code that interfaces with other code. A Web Service is a type of API, one that almost always operates over HTTP (though some, like SOAP, can use alternate transports, like SMTP).

4. What are various types of Exception Handling ?

Answer:
1. Choice Exception Handling.
2. Catch Exception Handling.
3. Rollback Exception Handling.
4. Global Exception Handling.
5. Default Exception Handling.


5. What Difficulties Mule Does Encompass ?

Answer:
Transport: applications can accept input from a variety of means, from the file system to the network.
Data format: speaking the right protocol is only part of the solution, as applications can use almost any form of representation for the data they exchange.
Invocation styles: synchronous, asynchronous, or batch call semantics entail very different integration strategies.
Lifecycles: applications of different origins that serve varied purposes tend to have disparate development, maintenance, and operational lifecycles. (Online Training Institute)

6. Why Mule Was Designed ?

Answer:

Mule’s core was designed as an event-driven framework combined with a unified representation of messages, expandable with pluggable modules. These modules would provide support for a wide range of transports or add extra features, such as distributed transactions, security, or management. Mule was also designed as a programmatic framework offering programmers the means to graft additional behavior such as specific message processing or custom data transformation. (Mulesoft ESB Interview Questions)

7. Why Spring-driven Configuration Builder Is Important Than Script Builder ?

Answer:

The advantages of Spring-driven configuration builder

It is the most popular — you are more likely to find examples using this syntax.
It is the most user-friendly — Spring takes care of wiring together all the moving parts of the ESB, something you must do by hand with a script builder. (What is Mulesoft)
It is the most expressive — dedicated XML schemas define the domain-specific language of Mule, allowing you to handle higher-level concepts than the scripting approach does.(Mulesoft ESB Interview Questions)

8. How can you change the runtime changes using mediation primitive ?

Answer:

We have future called Promotable properties in ESB. We can configure this future while development. Then we can make it changed at runtime without restarting the server it can be published.

9. What are all the configurations required for JDBC Adapter implementation ?

Answer:

Data Source needs to be created and need to configure with DB. If we have security, then need to created security authentication.

10. What is the difference between ESB and JMS ?

Answer:

ESB provides the middleware and interfaces that allow businesses to connect their applications without writing code.

JMS provides messaging capability and facilitates communication between the modules/applications.

11. What is Mule ESB ?

Answer:

Mule ESB is a Java-based enterprise service bus (ESB) and integration platform, developer can connect their application with ESB. Mule use service oriented architecture. Apart from of the different technologies the applications use, including JMS, Web Services, SMTP, HTTP. The advantage of ESB, it’s allow communicate different application. Messages can be any format SOAP to JSON. Mule ESB Development provide messaging framework that enable exchange of data among application. (Mulesoft ESB Interview Questions)

12. What is RAML ?

Answer:

RAML stands for RESTful API Modeling Language is a YAML-based language for describing RESTful APIs. It provides all the information necessary to describe RESTful or practically RESTful APIs.(Best Open Source ESB)
RAML is similar to WSDL, it contains endpoint URL, request/response schema, HTTP methods, and query and URI parameter.

13. Why we use RAML ?

Answer:

RAML helps client know, what the service is and how all the operations can be invoked. RAML helps the developer in creating the initial structure of this API. RAML can also be used for documentation purpose.

14. What Is Endpoint In Mule ?

Answer:

An endpoint represents the specific usage of a protocol, whether it is for listening/polling, reading from, or writing to a particular target destination. Hence it controls what underlying entities will be used with the connector they depend on. The target destination itself is defined as a URI. Depending on the connector, the URI will bear a different meaning; for example, it can represent a URL or a JMS destination.

15. Explain ESB Integration core principles ?

Answer:

Transformation – Data transformation between canonical data formats and specific data formats required by each ESB connector.
Transportation – Transport protocol negotiation between multiple formats. Such as HTTP, JMS, JDBC.
Mediation – Providing multiple interfaces for the purpose of a) supporting multiple versions of a service for backward compatibility or alternatively, b) to allow for multiple channels to the same underlying component implementation. This second requirement may involve providing multiple interfaces to the same component, one legacy interface (flat file) and one standard compliant (SOAP/XML) interface. (What is MuleSoft Used for)
Non-functional consistency – For a typical ESB initiative, this can include consistency around the way security and monitoring policies are applied and implemented.


16. What Is Transformer In Mule ?

Answer:

A transformer takes care of translating the content of a message from one form to another. It is possible to chain transformers to cumulate their effects. Transformers can kick in at different stages while a message transits through a service.

Mulesoft ESB Interview Questions

17. What is Correlation Context ?

Answer:

Correlation Context: Used when Mediation primitives want to pass values from the request flow to the response flow.

Used to pass values from the request message onto the response. (How to Learn MuleSoft)

18. Difference between Callout and Service Invoke ?

Answer:

Service Invoke: The Service Invoke primitive is used to make a service request in either a request or response mediation flow. The service may be Request/Response or One-Way. Multiple instances of the Service Invoke primitive are permitted in a flow, allowing a series of service invocations to be performed.

Callout: The Callout receives the message and calls the requested service and operation. There is a Callout node for each connected target operation in the mediation flow.

– If the call is successful, the Callout Response node in the response flow receives the response message.

– If the call is unsuccessful, the Callout can be set to retry service invocations depending on the type of fault received.

19. What are the Flow Processing Strategies ?

Answer:
Synchronous Flow Processing Strategy, Queued Flow Processing Strategy, Asynchronous Flow Processing Strategy, Thread Per Processing Strategy, Queued Asynchronous Flow Processing Strategy, Non-blocking Flow Processing Strategy, Custom Processing Strategy, Rollback Exception Handling. (Mulesoft ESB Interview Questions)

20. What are the different ESBs in the market ?

Answer:
There are various ESB’s available in the market. Some are opensource, some licenced:
1. Talend
2. Mule ESB
3. JBoss Fuse ESB

21. What are the advantages of RESTful web services ?

Answer:
Advantages of RESTful Web Services

Fast: RESTful Web Services are fast because there is no strict specification like SOAP. It consumes less bandwidth and resource.

Language and Platform independent: RESTful web services can be written in any programming language and executed in any platform.

Can use SOAP: RESTful web services can use SOAP web services as the implementation.

Permits different data format: RESTful web service permits different data format such as Plain Text, HTML, XML and JSON.

22. What are the advantages of using an ESB ?

Answer:
Provides a way for end points to connect to each other without having to directly talk to each other. It simplifies the communications for the end points as they only have to conform to a standard communication interface, the bus.

An ESB provides a single place to get some key end point metrics: frequency, availability, and performance.

An ESB tends to provide more than one communication interface. However, a developer only needs to choose the easiest one to get and receive the data from the bus.

23. What is caching and why to use it ?

Answer:
Caching is a concept with is used to store frequently used data in the memory, file system or database which saves processing time and load if it would have to be accessed from original source location every time.

24. How to select an ESB ?

Answer:
Usability: How complicated is the installation process? The learning curve of the ESB should not be long.
Maintainability: How to monitor the product? If any GUI terminal is available for monitoring the services.
Community: Is there active community for the ESB. Various discussion forums, tutorials etc.
Enterprose Support- Is the product support reliable. What services are available.
Flexibility: Can the ESB be configured to meet the business requirements.
Reliability: The reliablity of the ESB. Its current users and various case studies if available.
Cost: The cost of the ESB. Its Licence policies. Support cose. etc.

Mulesoft ESB Interview Questions

25. What is Mule Cache Scope and what are its storage types ?

Answer:
Caching in Mule ESB can be done by Mule Cache Scope. Mule Cache Scope has 3 storage types –

In-memory: This store the data inside system memory. The data stored with In-memory is non-persistent which means in case of API restart or crash, the data been cached will be lost.

Configuration Properties:

Store Name
Maximum number of entries
TTL (Time to live)
Expiration Interval
Managed-store: This stores the data in a place defined by ListableObjectStore. The data stored with Managed-store is persistent which means in case of API restart or crash, the data been cached will no be lost.

Configuration Properties:

Store Name
Maximum number of entries
TTL (Time to live)
Expiration Interval
Persistence (true/false)
Simple-test-file-store: This stores the data in a file. The data stored with Simple-test-file-store configuration is persistent which means in case of API restart or crash, the data been cached will no be lost.

26. Do you have any particular areas of interest or ability ?

Answer:
Talk to the interviewer about your strengths and be sure to highlight any particular skill that you excel in. It’s a great idea, if you can, to highlight specific skills that may be listed on the company’s job posting / job description. If there is a related area of interest where you’d like to expand your skills, you can mention those as well. (Mulesoft ESB Interview Questions)

27. What is ESB ?

Answer:
An enterprise service bus (ESB) is software architecture for middleware that provides fundamental services for more complex architectures. For example, an ESB incorporates the features required to implement a service-oriented architecture (SOA). In a general sense, an ESB can be thought of as a mechanism that manages access to applications and services (especially legacy versions) to present a single, simple, and consistent interface to end-users via Web- or forms-based client-side front ends.

28. What Is Bridge Component In Mule ?

Answer:
A bridge component is used to pass the messages from the inbound router to the outbound one. A bridge is a neutral component: it does not perform any action or modify messages that it processes.


29. What is Transient Context ?

Answer:
Transient Context: Used for passing values between Mediation primitives within the current flow â€” either the request flow or the responses flow. The transient context cannot link requests and responses and hence cannot be used across. Used when you want to save an input message before a service invokes call (within a request or response flow). After the services invoke call, the next primitive can create another message by combining the service invoke response and the original message stored in the transient context.

30. Why Mule ESB ?

Answer:
Mule ESB is lightweight open source framework but highly scalable, allowing you to start small application and connect multiple applications. Mule manages all the interactions between applications and components transparently, ESB will take care of the multiple application, we can easily integrate third party application using Mule.

31. How can you implement a loop in mediation ?

Answer:
By using Fan-in and Fan-out primitive.

Mulesoft ESB Interview Questions And Answers

32. What Is Router In Mule ?

Answer:
Routers play a crucial role in controlling the trajectory a message will follow when it transits in Mule. They are the gatekeepers of the endpoints of a service, taking care of keeping messages on the right succession of tracks so they can reach their intended destinations. Certain routers act like the big classification yards: they can split, sort, or regroup messages based on certain conditions.

33. What is RAML and why we use it ?

Answer:
RAML – REST ful API Modeling Language
RAML is similar to WSDL, it contains endpoint URL, request/response schema, HTTP methods and query and URI parameter.

RAML helps client (a consumer of the service) know, what the service is and what/how all operations can be invoked.

RAML helps the developer in creating the initial structure of this API. RAML can also be used for documentation purpose.

34. What are the Message Sources in Mule ESB ?

Answer:
Message sources in Mule are usually Anypoint Connectors, elements which provide connectivity to a specific external source, either via a standard protocol (such as HTTP, FTP, SMTP) or a third-party API (such as Salesforce.com, Twitter, or MongoDB).
REST stands for Representaional State Transfer or RESTful web service. REST is a client-server architecture which means each unique URL is representation of some object or resource. Any REST API developed uses HTTP methods explicitly and in a way that’s consistent with the protocol definition. This basic REST design principle establishes a one-to-one mapping between create, read, update, and delete (CRUD) operations and HTTP methods. According to this mapping:

1. To create a resource on the server, use POST.
2. To retrieve a resource, use GET.
3. To change the state of a resource or to update it, use PUT.
4. To remove or delete a resource, use DELETE.

35. What Are Configuration Builders In Mule ?

Answer:
Mule uses configuration builders that can translate a human-authored configuration file into the complex graph of objects that constitutes a running node of this ESB. The main builders are of two kinds: a Spring-driven builder, which works with XML files, and a script builder, which can accept scripting language files.

36. What are different types of Primitives used in Mediation ?

Answer:
These are the different types of primitives in mediation:
1. Message Filter
2. Type Filter
3. Endpoint Lookup
4. Service Invoke
5. Fan-out
6. Fan-in
7. XSLT
8. BO Map
9. Message Element Setter
10. DB lookup
11. Data Handler
12. Custom Mediation
13. Header Setters
14. Message Logger
15. Even Emitter
16. Stop
17. Fail
18. Sub Flow

37. What is a REST web service ?

Answer:
Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability, that enable services to work best on the Web.

38. Various types of variables in mule ?

Answer:
1. Record Variable.
2. Flow Variable.
3. Session Variable.

Mulesoft ESB Interview Questions And Answers

39. Why Mule is preferred than other ESB implementations ?

Answer:
Mule is lightweight but highly scalable, allowing you to start small and connect more applications over time. The ESB manages all the interactions between applications and components transparently, regardless of whether they exist in the same virtual machine or over the Internet, and regardless of the underlying transport protocol used.

Several commercial ESB implementation provide limited functionality or built on top of an existing application server or messaging server, locking you into that specific vendor. Mule is vendor-neutral, so different vendor implementations can plug in to it. You are never locked in to a specific vendor when you use Mule.

40. When do we need ESB ?
Answer:
Mule and other ESBs offer real value in scenarios where there are at least a few integration points or at least 3 applications to integrate. They are also well suited to scenarios where loose coupling, scalability and robustness are required.

41. How Mule ESB works ?
Answer:
Mule is based on the concept of Event Driven Architecture (EDA), works by responding to messages initiated by external resources (that is, events). Mule applications accept and process events as messages through several message processors plugged together in a flow. Alternatively, large or streaming messages can be processed as records in a batch job.

Every Mule flow contains a series of message processors that accept, then process messages. Mule applications usually contain multiple linked flows and/or batch jobs, which, in combination, perform the integration required for your use case.


42. Explain Flow in Mule ESB ?
Answer:
A flow is the construct within which you link together several individual elements to handle the receipt, processing, and eventual routing of a message.

A Flow is a sequence of message-processing events. A message that enters a flow may pass through a wide variety of processors. In the example diagram below, Mule receives the message through a request-response inbound endpoint, transforms the content into a new format, and processes the business logic in a component before returning a response via the message source.

43. Explain Batch Jobs in Mule ESb ?
Answer: A batch job is a top-level element in Mule ESB which exists outside all Mule flows. Batch jobs split large messages into records which Mule processes asynchronously; just as flows process messages, batch jobs process records.

A batch job contains one or more batch steps which, in turn, contain any number of message processors that act upon records.

A batch job executes when triggered by either a batch executor in a Mule flow or a message source in a batch-accepting input. when triggered, Mule creates a new batch job instance. When all records have passed through all batch steps, the batch job instance ends and the batch job result can be summarized in a report to indicate which records succeeded and which failed during processing. (Mulesoft Interview Questions – 2018 Latest)

44. What are Message Sources is Mule ESB ?
Answer: Message sources in Mule are usually Anypoint Connectors, elements which provide connectivity to a specific external source, either via a standard protocol (such as HTTP, FTP, SMTP) or a third-party API (such as Salesforce.com, Twitter, or MongoDB.)

45. Explain Mule Expression Language (MEL) ?
Answer:MEL is a lightweight, Mule-specific expression language that you can use to access and evaluate the data in the payload, properties and variables of a Mule message. Accessible and usable from within virtually every message processor in Mule, MEL enables you to quickly and elegantly filter, route, or otherwise act upon the different parts of the Mule message object.

48. What are the different types of variables in mule ?
Answer: Flow Variable
Session Variable
Record Variable

49. What are Shared Resources in Mule and how are they been used ?
Answer: We can make connectors as an reusable component by defining them as common resources and expose them to all applications deployed under a same domain, these resources are known as shared resources. These shared resource needs to be defined inside Mule Domain Project and then referred to each of the projects that are meant to use the elements in it.

